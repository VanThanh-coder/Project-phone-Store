import React, { useContext, useState } from "react";
import { CartContext } from "../context/Cartcontext";
import { useNavigate } from "react-router-dom";
import "../styles/Checkout.scss";

const Checkout = () => {
  const { cart, getTotalPrice, clearCart } = useContext(CartContext);
  const navigate = useNavigate();
  const [customerInfo, setCustomerInfo] = useState({
    name: "",
    phone: "",
    address: "",
  });

  const handleChange = (e) => {
    setCustomerInfo({ ...customerInfo, [e.target.name]: e.target.value });
  };
  const handleOrder = async () => {
    if (!customerInfo.name || !customerInfo.phone || !customerInfo.address) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    if (!Array.isArray(cart) || cart.length === 0) {
      alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
      return;
    }

    const formattedCart = cart.map((item) => ({
      id: Number(item.id),
      name: item.name,
      quantity: Number(item.quantity),
      price: Number(item.price),
    }));

    const orderData = {
      ...customerInfo,
      cart: formattedCart,
    };

    console.log("üõí D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(orderData, null, 2));

    try {
      const response = await fetch("http://localhost/backend/save_order.php", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(orderData),
      });

      if (!response.ok) {
        throw new Error(`L·ªói server: ${response.status}`);
      }

      const result = await response.json();
      console.log("üì© K·∫øt qu·∫£ t·ª´ server:", result);

      if (result.order_id) {
        alert("‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: " + result.order_id);

        // üõë X√≥a gi·ªè h√†ng ngay l·∫≠p t·ª©c tr∆∞·ªõc khi ƒëi·ªÅu h∆∞·ªõng
        clearCart();

        // ‚úÖ ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ React c·∫≠p nh·∫≠t state tr∆∞·ªõc khi chuy·ªÉn trang
        setTimeout(() => {
          navigate("/profilepage");
        }, 500); // Ch·ªù 0.5 gi√¢y ƒë·ªÉ c·∫≠p nh·∫≠t state
      } else {
        alert(
          "‚ö† L·ªói khi ƒë·∫∑t h√†ng: " + (result.error || "Kh√¥ng r√µ nguy√™n nh√¢n")
        );
      }
    } catch (error) {
      console.error("üö® L·ªói k·∫øt n·ªëi ho·∫∑c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá:", error);
      alert("L·ªói khi k·∫øt n·ªëi m√°y ch·ªß! Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div className="checkout-container">
      <h1 className="checkout-title">Thanh to√°n</h1>

      <div className="form-group">
        <label>H·ªç v√† t√™n:</label>
        <input
          type="text"
          name="name"
          value={customerInfo.name}
          onChange={handleChange}
        />
      </div>

      <div className="form-group">
        <label>S·ªë ƒëi·ªán tho·∫°i:</label>
        <input
          type="tel"
          name="phone"
          value={customerInfo.phone}
          onChange={handleChange}
        />
      </div>

      <div className="form-group">
        <label>ƒê·ªãa ch·ªâ giao h√†ng:</label>
        <input
          type="text"
          name="address"
          value={customerInfo.address}
          onChange={handleChange}
        />
      </div>

      <h2 className="total-price">
        T·ªïng ti·ªÅn: {getTotalPrice().toLocaleString()} VND
      </h2>

      <button onClick={handleOrder} className="checkout-button">
        X√°c nh·∫≠n ƒë·∫∑t h√†ng
      </button>
    </div>
  );
};

export default Checkout;
